@page "/"
@page "/{LoadedCodeId:guid}"
@using System.Text
@using Microsoft.Extensions.Logging
@using Common
@using Compiler
@using AstTransformations
@using DatabaseHandler
@using Microsoft.Quantum.QsCompiler.SyntaxTree
@inject IJSRuntime JsRuntime;
@inject ICompiler Compiler;
@inject ILogger<Index> Logger;
@inject ICodeDatabaseHandler DatabaseHandler;
@inject NavigationManager NavigationManager;

<div class="main">
    <div class="top-row px-4">
        <Toasts />
        <ExamplesDropdown OnSelected="@(async code => await Editor.SetCode(code))" ExamplesFolderPath="./CodeExamples/" />
        <ShareButton GetCode="@(() => Editor.GetCode())" IsDisabled="@(!DatabaseHandler.CheckConnection())"></ShareButton>
        <img id="dark-mode-toggle" src="/images/icons/dark-mode.svg" onclick="Library.toggleTheme()" alt="">
        <LsStatus/>
        <button id="compile" @ref="compileButtonRef" class="btn btn-primary px-2" @onclick="OnCompile">Compile & Run</button>
    </div>
    <Progress @ref="progress"></Progress>
    <div class="content">
        <div id="splitPanes">
            <div id="left-pane" class="split split-horizontal split-content">
                <Editor @ref="Editor" GetInitialCode="@GetCodeFromDatabase" />
            </div>
            <div id="right-pane" class="split split-horizontal">
                <div id="top-pane" class="split split-content">
                    <Composer @ref="Composer"/>
                </div>
                <div id="bottom-pane" class="split split-content">
                    <Visualizer @ref="Visualizer" />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
#nullable disable

    private Editor Editor;
    private Composer Composer;
    private Visualizer Visualizer;

    private Progress progress;
    private ElementReference compileButtonRef;

    private readonly StringBuilder output = new();

    [Parameter]
    public Guid? LoadedCodeId { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Compiler.OnDiagnostics += DiagnosticsHandler;
        Compiler.OnGrids += GridsHandler;
        Compiler.OnOutput += OutputHandler;
        Compiler.OnStatesRecorded += (_, states) => { Visualizer.ShowStates(states); };
    }

    /// <summary>On-click handler for the compilation button.</summary>
    private async Task OnCompile()
    {
        if (progress.Running) return;

        await ToggleCompilation(true);
        output.Clear();

        Visualizer.SetPlaceholder("Processing...");

        string code = await Editor.GetCode();

        Task task = new(() => // run compilation in a separate thread so that we don't block the UI
        {
            Compiler.Compile(code, Composer.Expanding).ContinueWith(
                async t =>
                {
                    await ToggleCompilation(false);
                    var messages = string.Join('\n', t.Exception!.InnerExceptions.Select(x => x.Message));
                    Visualizer.SetOutput(messages);
                },
                TaskContinuationOptions.OnlyOnFaulted);
        }, TaskCreationOptions.LongRunning);

        task.Start();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await JsRuntime.InvokeVoidAsync("Library.initPopOverDestroyer");
        await JsRuntime.InvokeVoidAsync("Library.initializeSplitPanes");

        if (LoadedCodeId != null)
        {
            await JsRuntime.InvokeVoidAsync("Library.changeUrl", NavigationManager.BaseUri);
        }
    }

    #region Compilation event handlers

    private async void DiagnosticsHandler(object _, string val)
    {
        await ToggleCompilation(false);
        output.AppendLine(val);
        Visualizer.SetOutput(output.ToString());
    }

    private async void GridsHandler(object _, Dictionary<string, List<GateGrid>> grids)
    {
        await Composer.UpdateGridsAsync(grids);
    }

    private async void OutputHandler(object _, string stdout)
    {
        await ToggleCompilation(false);

        if (output.Length != 0)
        {
            output.AppendLine();
        }

        output.AppendLine(string.IsNullOrEmpty(stdout) ? "No messages" : stdout);
        Visualizer.SetOutput(output.ToString());
    }

    #endregion

    /// <summary>Toggle the progressbar and whether the compilation button is enabled.</summary>
    private async Task ToggleCompilation(bool running)
    {
        progress.Running = running;
        await JsRuntime.InvokeVoidAsync(running ? "Library.disable" : "Library.enable", compileButtonRef);
    }

    private string GetCodeFromDatabase()
    {
        if (LoadedCodeId != null && DatabaseHandler.CheckConnection())
        {
            string code = null;
            try
            {
                (_, code) = DatabaseHandler.GetCode(LoadedCodeId.Value);
            }
            catch (KeyNotFoundException) { } // todo: show message using toasts
            return code;
        }
        return null;
    }

}
