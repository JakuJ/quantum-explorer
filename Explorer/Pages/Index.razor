@page "/"
@* @using Compiler *@
@using Explorer.Utilities.ComponentTree
@using Newtonsoft.Json
@* @using AstTransformations *@
@using System.Text
@using Microsoft.Extensions.Logging
@using Microsoft.Quantum.QsCompiler.SyntaxTree
@using System.Diagnostics.CodeAnalysis
@inject IJSRuntime JsRuntime;
@* @inject ICompiler Compiler; *@
@inject ILogger<Index> Logger;

<div class="main">
    <div class="top-row px-4">
        <Toasts/>
        <button id="compile" class="btn btn-primary" @onclick="OnCompile">Analyze circuits</button>
    </div>

    <div class="content px-4">
        <div id="splitPanes">
            @Components
        </div>
    </div>
</div>

@code {
#nullable disable

    private Panel<Editor> Editor;
    private Panel<Compositor> Compositor;
    private Panel<Visualizer> Visualizer;

    private readonly StringBuilder outputSb = new();

    RenderFragment Components => new PanelRenderer().Render(tree);

    readonly PanelTree tree = new(PanelTree.Alignment.Horizontal);

    [ExcludeFromCodeCoverage] // TODO: Waiting for final form of the page and integration tests
    protected override void OnInitialized()
    {
        base.OnInitialized();

        Editor = tree.AddPanel<Editor>();

        PanelTree sidePanel = new(PanelTree.Alignment.Vertical);

        Compositor = sidePanel.AddPanel<Compositor>();
        Visualizer = sidePanel.AddPanel<Visualizer>();

        tree.AddPanel(sidePanel);
    }

    [ExcludeFromCodeCoverage]
    private async Task OnCompile()
    {
        outputSb.Clear();

        string code = await Editor.Component.GetCode();
    // await Compiler.Compile(code, true);
    }

    [ExcludeFromCodeCoverage]
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        string serializedTree = JsonConvert.SerializeObject(tree, new JsonSerializerSettings
        {
            TypeNameHandling = TypeNameHandling.Auto,
        });

        await JsRuntime.InvokeVoidAsync("Library.InitializeSplitPanes", serializedTree);
    }

}
