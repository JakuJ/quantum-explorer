@page "/"
@using System.Text
@using Microsoft.Extensions.Logging
@using Newtonsoft.Json
@using Compiler
@using AstTransformations
@using Explorer.Utilities.ComponentTree
@using Microsoft.Quantum.QsCompiler.SyntaxTree
@using System.Diagnostics.CodeAnalysis
@inject IJSRuntime JsRuntime;
@inject ICompiler Compiler;
@inject ILogger<Index> Logger;

<div class="main">
    <div class="top-row px-4">
        <Toasts/>
        <LsStatus @ref="Status"/>
        <button id="compile" class="btn btn-primary" @onclick="OnCompile">Compile & Run</button>
    </div>

    <div class="content px-4">
        <div id="splitPanes">
            @Components
        </div>
    </div>
</div>

@code {
#nullable disable

    private Panel<Editor> Editor;
    private Panel<Compositor> Compositor;
    private Panel<Visualizer> Visualizer;

    private LsStatus Status;

    private readonly StringBuilder outputSb = new();

    RenderFragment Components => new PanelRenderer().Render(tree);

    readonly PanelTree tree = new(PanelTree.Alignment.Horizontal);

    [ExcludeFromCodeCoverage] // TODO: Waiting for final form of the page and integration tests
    protected override void OnInitialized()
    {
        base.OnInitialized();

        Editor = tree.AddPanel<Editor>();

        PanelTree sidePanel = new(PanelTree.Alignment.Vertical);

        Compositor = sidePanel.AddPanel<Compositor>();
        Visualizer = sidePanel.AddPanel<Visualizer>();

        tree.AddPanel(sidePanel);

        Compiler.OnDiagnostics += (_, val) =>
        {
            outputSb.AppendLine(val);
            Visualizer.Component.SetText(outputSb.ToString());
        };

        Compiler.OnOutput += (_, stdout) =>
        {
            if (outputSb.Length != 0)
            {
                outputSb.AppendLine();
            }

            outputSb.AppendLine(string.IsNullOrEmpty(stdout) ? "No messages" : stdout);

            Visualizer.Component.SetText(outputSb.ToString());
        };

        Compiler.OnCompilation += (_, _) => ProcessCompilation();
        Compiler.OnStatesRecorded += (_, states) => { Visualizer.Component.ShowStates(states); };
    }

    [ExcludeFromCodeCoverage]
    private async Task OnCompile()
    {
        outputSb.Clear();

        Visualizer.Component.SetText("Compiling ...");

        string code = await Editor.Component.GetCode();

    // run compilation in a separate thread so that we don't block the UI
        Task task = new(() =>
        {
            Compiler.Compile(code, true).ContinueWith(
                t =>
                {
                    string messages = string.Join('\n', t.Exception!.InnerExceptions.Select(x => x.Message));
                    Visualizer.Component.SetText($"Simulation errors occured:\n\n{messages}");
                },
                TaskContinuationOptions.OnlyOnFaulted);
        }, TaskCreationOptions.LongRunning);

        task.Start();
    }

    [ExcludeFromCodeCoverage]
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        string serializedTree = JsonConvert.SerializeObject(tree, new JsonSerializerSettings
        {
            TypeNameHandling = TypeNameHandling.Auto,
        });

        await JsRuntime.InvokeVoidAsync("Library.InitializeSplitPanes", serializedTree);
        await Editor.Component.SetStatusReference(Status);
    }

    [ExcludeFromCodeCoverage]
    private void ProcessCompilation()
    {
        if (outputSb.Length == 0) // no diagnostics
        {
            Visualizer.Component.SetText("Executing ...");
        }
    }

}
