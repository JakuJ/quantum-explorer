@page "/"
@using Compiler
@using Explorer.Utilities.ComponentTree
@using Newtonsoft.Json
@using AstTransformations
@using System.Text
@using Microsoft.Extensions.Logging
@using Microsoft.Quantum.QsCompiler.SyntaxTree
@inject IJSRuntime JsRuntime;
@inject ICompiler Compiler;
@inject ILogger<Index> Logger;

<div class="main">
    <div class="top-row px-4">
        <Toasts/>
        <button id="compile" class="btn btn-primary" @onclick="OnCompile">Analyze circuits</button>
    </div>

    <div class="content px-4">
        <div id="splitPanes">
            @Components
        </div>
    </div>
</div>

@code {
    internal Panel<Editor>? Editor;
    internal Panel<Editor>? OutputEditor;
    internal Panel<Output>? Output;

    RenderFragment Components => new PanelRenderer().Render(tree);

    readonly PanelTree tree = new PanelTree(PanelTree.Alignment.Horizontal);

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Logger.LogInformation("New index page initialized");

        Editor = tree.AddPanel<Editor>();

        var sidePanel = new PanelTree(PanelTree.Alignment.Vertical);

        OutputEditor = sidePanel.AddPanel<Editor>();
        Output = sidePanel.AddPanel<Output>();

        tree.AddPanel(sidePanel);

        Compiler.OnDiagnostics += (sender, val) => { Output.Component.Value += val + "\n\n"; };
        Compiler.OnOutput += (sender, val) => { Output.Component.Value += "\n\n===========\n\n" + val; };
        Compiler.OnCompilation += async (sender, comp) => await ProcessCompilation(comp);
    }

    private async Task OnCompile()
    {
        Output!.Component.Value = "";
        string code = await Editor!.Component.GetCode();
        await Compiler.Compile(code);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        string serializedTree = JsonConvert.SerializeObject(tree, new JsonSerializerSettings
        {
            TypeNameHandling = TypeNameHandling.Auto,
        });

        await JsRuntime.InvokeVoidAsync("Library.InitializeSplitPanes", serializedTree);
    }

    private async Task ProcessCompilation(QsCompilation compilation)
    {
        Dictionary<string, GateGrid> ast = FromQSharp.GetGates(compilation);

        var builder = new StringBuilder();
        foreach ((string key, GateGrid? grid) in ast)
        {
            grid?.Shrink();
            builder.AppendLine(key);
            builder.AppendLine(grid?.ToString() ?? "Couldn't extract circuit info\n");
        }
        await OutputEditor!.Component.SetCode(builder.ToString());
    }

}
