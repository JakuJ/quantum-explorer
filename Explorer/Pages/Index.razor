@page "/"
@using Explorer.Utilities.ComponentTree
@using Newtonsoft.Json
@using Compiler
@inject IJSRuntime JsRuntime;
@inject ICompiler Compiler;

<div class="main">
    <div class="top-row px-4">
        <button id="compile" class="btn btn-primary" @onclick="OnCompile">Analyze and pretty-print</button>
    </div>

    <div class="content px-4">
        <div id="splitPanes">
            @Components
        </div>
    </div>
</div>

@code {
#nullable disable
    internal Panel<Editor> Editor;
    internal Panel<Editor> OutputEditor;
    internal Panel<DiagnosticList> Diagnostics;

    RenderFragment Components => new PanelRenderer().Render(tree);

    readonly PanelTree tree = new PanelTree(PanelTree.Alignment.Horizontal);

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Editor = tree.AddPanel<Editor>();

        var sidePanel = new PanelTree(PanelTree.Alignment.Vertical);

        OutputEditor = sidePanel.AddPanel<Editor>();
        Diagnostics = sidePanel.AddPanel<DiagnosticList>();

        tree.AddPanel(sidePanel);
    }

    private async Task OnCompile()
    {
        string code = await Editor.Component.GetCode();
        await Compiler.Compile(code);

        Diagnostics.Component.Diagnostics = Compiler.GetDiagnostics();
        await OutputEditor.Component.SetCode(Compiler.GetCode());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await InitializePanels();
    }

    private async Task InitializePanels()
    {
        string serializedTree = JsonConvert.SerializeObject(tree, new JsonSerializerSettings
        {
            TypeNameHandling = TypeNameHandling.Auto
        });
        await JsRuntime.InvokeVoidAsync("Library.InitializeSplitPanes", serializedTree);
    }

}
