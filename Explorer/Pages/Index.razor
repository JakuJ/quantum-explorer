@page "/"
@using Compiler
@using Explorer.Utilities.ComponentTree
@using Newtonsoft.Json
@using AstTransformations
@using System.Text
@using Microsoft.Extensions.Logging
@using Microsoft.Quantum.QsCompiler.SyntaxTree
@using System.Diagnostics.CodeAnalysis
@inject IJSRuntime JsRuntime;
@inject ICompiler Compiler;
@inject ILogger<Index> Logger;

<div class="main">
    <div class="top-row px-4">
        <Toasts/>
        <button id="compile" class="btn btn-primary" @onclick="OnCompile">Analyze circuits</button>
    </div>

    <div class="content px-4">
        <div id="splitPanes">
            @Components
        </div>
    </div>
</div>

@code {
    internal Panel<Editor>? Editor;
    internal Panel<Compositor>? Compositor;
    internal Panel<Editor>? ExecutionOutput;

    private readonly StringBuilder outputSb = new StringBuilder();

    RenderFragment Components => new PanelRenderer().Render(tree);

    readonly PanelTree tree = new PanelTree(PanelTree.Alignment.Horizontal);

    [ExcludeFromCodeCoverage] // TODO: Waiting for final form of the page and integration tests
    protected override void OnInitialized()
    {
        base.OnInitialized();

        Editor = tree.AddPanel<Editor>();

        var sidePanel = new PanelTree(PanelTree.Alignment.Vertical);

        Compositor = sidePanel.AddPanel<Compositor>();
        ExecutionOutput = sidePanel.AddPanel<Editor>();

        tree.AddPanel(sidePanel);

        Compiler.OnDiagnostics += async (sender, val) =>
        {
            outputSb.AppendLine(val);
            await ExecutionOutput.Component.SetCode(outputSb.ToString());
        };

        Compiler.OnOutput += async (sender, stdout) =>
        {
            if (outputSb.Length != 0)
            {
                outputSb.AppendLine();
            }

            outputSb.AppendLine(string.IsNullOrEmpty(stdout) ? "No messages" : stdout);

            await ExecutionOutput.Component.SetCode(outputSb.ToString());
        };

        Compiler.OnCompilation += async (sender, comp) => await ProcessCompilation(comp);
    }

    [ExcludeFromCodeCoverage]
    private async Task OnCompile()
    {
        outputSb.Clear();

        await ExecutionOutput!.Component.SetCode("<compiling>");

        string code = await Editor!.Component.GetCode();
        await Compiler.Compile(code, true);
    }

    [ExcludeFromCodeCoverage]
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        string serializedTree = JsonConvert.SerializeObject(tree, new JsonSerializerSettings
        {
            TypeNameHandling = TypeNameHandling.Auto,
        });

        await JsRuntime.InvokeVoidAsync("Library.InitializeSplitPanes", serializedTree);
    }

    [ExcludeFromCodeCoverage]
    private async Task ProcessCompilation(QsCompilation compilation)
    {
        if (outputSb.Length == 0) // no diagnostics
        {
            await ExecutionOutput!.Component.SetCode("<executing>");
        }
    }

}
