@page "/"
@using Compiler
@using Explorer.Utilities.ComponentTree
@using Newtonsoft.Json
@using AstTransformations
@using System.Text
@using System.Linq
@using System.Diagnostics.CodeAnalysis
@using DiagnosticSeverity = Microsoft.VisualStudio.LanguageServer.Protocol.DiagnosticSeverity
@inject IJSRuntime JsRuntime;
@inject ICompiler Compiler;

<div class="main">
    <div class="top-row px-4">
        <button id="compile" @ref="compileButton" class="btn btn-primary" @onclick="OnCompile" disabled>Analyze circuits</button>
    </div>

    <div class="content px-4">
        <div id="splitPanes">
            @Components
        </div>
    </div>
</div>

@code {
    private static bool compilerLoaded = false;

    internal Panel<Editor>? Editor;
    internal Panel<Editor>? OutputEditor;
    internal Panel<DiagnosticList>? Diagnostics;

    private ElementReference compileButton;

    RenderFragment Components => new PanelRenderer().Render(tree);

    readonly PanelTree tree = new PanelTree(PanelTree.Alignment.Horizontal);

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Editor = tree.AddPanel<Editor>();

        var sidePanel = new PanelTree(PanelTree.Alignment.Vertical);

        OutputEditor = sidePanel.AddPanel<Editor>();
        Diagnostics = sidePanel.AddPanel<DiagnosticList>();

        tree.AddPanel(sidePanel);
    }

    [ExcludeFromCodeCoverage] // TODO: Integration tests
    private async Task OnCompile()
    {
        await Compiler.Compile(await Editor!.Component.GetCode());
        Diagnostics!.Component.Diagnostics = Compiler.Diagnostics;

        if (Compiler.Diagnostics.Where(x => x.Severity == DiagnosticSeverity.Error).Count() == 0)
        {
            Dictionary<string, GateGrid> ast = FromQSharp.GetGates(Compiler.Compilation);

            // Text representation of the GateGrid (until we have the compositor)
            var builder = new StringBuilder();
            foreach ((string key, GateGrid? grid) in ast)
            {
                grid?.Shrink();
                builder.AppendLine(key);
                builder.AppendLine(grid?.ToString() ?? "Couldn't extract circuit info\n");
            }
            await OutputEditor!.Component.SetCode(builder.ToString());
        }
        else
        {
            await OutputEditor!.Component.SetCode("Build failed");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        if (!compilerLoaded)
        {
            Compiler.Ready += (sender, e) =>
            {
                JsRuntime.InvokeVoidAsync("Library.enable", compileButton, true);
                compilerLoaded = true;
            };
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("Library.enable", compileButton, true);
        }

        string serializedTree = JsonConvert.SerializeObject(tree, new JsonSerializerSettings
        {
            TypeNameHandling = TypeNameHandling.Auto,
        });

        await JsRuntime.InvokeVoidAsync("Library.InitializeSplitPanes", serializedTree);
    }

}
