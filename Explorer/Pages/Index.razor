@page "/"
@using Compiler
@using Explorer.Utilities.ComponentTree
@using Newtonsoft.Json
@using AstTransformations
@using System.Text
@using System.Diagnostics.CodeAnalysis
@inject IJSRuntime JsRuntime;
@inject ICompiler Compiler;

<div class="main">
    <div class="top-row px-4">
        <Toasts/>
        <button id="compile" class="btn btn-primary" @onclick="OnCompile">Analyze circuits</button>
    </div>

    <div class="content px-4">
        <div id="splitPanes">
            @Components
        </div>
    </div>
</div>

@code {
    private static bool compilerLoaded;

    internal Panel<Editor>? Editor;
    internal Panel<Editor>? OutputEditor;
    internal Panel<Output>? Output;

    RenderFragment Components => new PanelRenderer().Render(tree);

    readonly PanelTree tree = new PanelTree(PanelTree.Alignment.Horizontal);

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Editor = tree.AddPanel<Editor>();

        var sidePanel = new PanelTree(PanelTree.Alignment.Vertical);

        OutputEditor = sidePanel.AddPanel<Editor>();
        Output = sidePanel.AddPanel<Output>();

        tree.AddPanel(sidePanel);

        Compiler.OutputReady += (sender, args) => { Output.Component.Value = $"{args.Diagnostics}\n\n{args.Output}"; };
    }

    [ExcludeFromCodeCoverage] // TODO: Integration tests
    private async Task OnCompile()
    {
        string code = await Editor!.Component.GetCode();
        await Compiler.Compile(code);

        Dictionary<string, GateGrid> ast = FromQSharp.GetGates(Compiler.Compilation);

    // Text representation of the GateGrid (until we have the compositor)
        var builder = new StringBuilder();
        foreach ((string key, GateGrid? grid) in ast)
        {
            grid?.Shrink();
            builder.AppendLine(key);
            builder.AppendLine(grid?.ToString() ?? "Couldn't extract circuit info\n");
        }
        await OutputEditor!.Component.SetCode(builder.ToString());

    // Output from the simulation
    // TODO
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        string serializedTree = JsonConvert.SerializeObject(tree, new JsonSerializerSettings
        {
            TypeNameHandling = TypeNameHandling.Auto,
        });

        await JsRuntime.InvokeVoidAsync("Library.InitializeSplitPanes", serializedTree);
    }

}
