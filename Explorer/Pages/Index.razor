@page "/"
@using System.Text
@using Microsoft.Extensions.Logging
@using Compiler
@using Microsoft.Quantum.QsCompiler.SyntaxTree
@inject IJSRuntime JsRuntime;
@inject ICompiler Compiler;
@inject ILogger<Index> Logger;

<div class="main">
    <div class="top-row px-4">
        <Toasts/>
        <img id="dark-mode-toggle" src="/images/icons/dark-mode.svg" onclick="Library.toggleTheme()" alt="">
        <LsStatus @ref="status"/>
        <button id="compile" @ref="compileButtonRef" class="btn btn-primary px-2" @onclick="OnCompile">Compile & Run</button>
    </div>
    <Progress @ref="progress"></Progress>
    <div class="content">
        <div id="splitPanes">
            <div id="left-pane" class="split split-horizontal split-content">
                <Editor @ref="Editor"/>
            </div>
            <div id="right-pane" class="split split-horizontal">
                <div id="top-pane" class="split split-content">
                    <Compositor @ref="Compositor"/>
                </div>
                <div id="bottom-pane" class="split split-content">
                    <Visualizer @ref="Visualizer"/>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
#nullable disable

    private Editor Editor;
    private Compositor Compositor;
    private Visualizer Visualizer;

    private LsStatus status;
    private Progress progress;
    private ElementReference compileButtonRef;

    private readonly StringBuilder output = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Compiler.OnDiagnostics += diagnosticsHandler;
        Compiler.OnOutput += outputHandler;
        Compiler.OnCompilation += compilationHandler;
        Compiler.OnStatesRecorded += (_, states) => { Visualizer.ShowStates(states); };
    }

    /// <summary>On-click handler for the compilation button.</summary>
    private async Task OnCompile()
    {
        await toggleCompilation(true);
        output.Clear();

        Visualizer.SetPlaceholder("Compiling");

        string code = await Editor.GetCode();

        Task task = new(() => // run compilation in a separate thread so that we don't block the UI
        {
            Compiler.Compile(code).ContinueWith(
                async t =>
                {
                    await toggleCompilation(false);
                    string messages = string.Join('\n', t.Exception!.InnerExceptions.Select(x => x.Message));
                    Visualizer.SetOutput(messages);
                },
                TaskContinuationOptions.OnlyOnFaulted);
        }, TaskCreationOptions.LongRunning);

        task.Start();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await JsRuntime.InvokeVoidAsync("Library.initializeSplitPanes");
        await Editor.SetStatusReference(status);
    }

    #region Compilation event handlers

    private void compilationHandler(object _, QsCompilation compilation)
    {
        if (output.Length == 0) // no diagnostics
        {
            Visualizer.SetPlaceholder("Executing");
        }
    }

    private async void diagnosticsHandler(object _, string val)
    {
        await toggleCompilation(false);
        output.AppendLine(val);
        Visualizer.SetOutput(output.ToString());
    }

    private async void outputHandler(object _, string stdout)
    {
        await toggleCompilation(false);

        if (output.Length != 0)
        {
            output.AppendLine();
        }

        output.AppendLine(string.IsNullOrEmpty(stdout) ? "No messages" : stdout);
        Visualizer.SetOutput(output.ToString());
    }

    #endregion

    /// <summary>Toggle the progressbar and whether the compilation button is enabled.</summary>
    private async Task toggleCompilation(bool running)
    {
        progress.Running = running;
        await JsRuntime.InvokeVoidAsync(running ? "Library.disable" : "Library.enable", compileButtonRef);
    }

}
