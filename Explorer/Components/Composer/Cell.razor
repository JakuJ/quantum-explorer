@inject CellMenusNotifier Notifier
@inject ILogger<Cell> Logger
@using Microsoft.Extensions.Logging
@using Common
@using System.Diagnostics.CodeAnalysis
@implements IDisposable

<SnapPoint X="@X" Y="@Y" Half="@false" @ref="snapPoint" Locked="@(QuantumGate.HasValue)"/>
<div class="grid-cell @ClickedCellStr">
    @if (QuantumGate.HasValue)
    {
        <Gate Name="@(QuantumGate.Value.Name)" @ref="gate" ClickAction="OnClick"/>
    }
    else
    {
        <button class="grid-blankcell-button" @onclick="OnClick"></button>
    }
</div>
@if (Clicked)
{
    @if (QuantumGate.HasValue)
    {
        <DeleteGateMenu ExitMenu="@ExitDeleteGateMenu" Left="@(50 * X)"/>
    }
    else
    {
        <AddGateMenu ExitMenu="@ExitAddGateMenu" Left="@(50 * X)"/>
    }
}

@code {

    private Gate? gate;

    private SnapPoint snapPoint = null!;

    private bool Clicked { get; set; } = false;

    [Parameter]
    public QuantumGate? QuantumGate { get; set; }

    [Parameter]
    public int X { get; set; }

    [Parameter]
    public int Y { get; set; }

    [Parameter]
    public Dictionary<string, SnapPoint> SnapPoints { get; set; } = null!;

    [Parameter]
    public Action<string, string> AddGate { get; set; } = null!;

    [Parameter]
    public Action<string> DeleteGate { get; set; } = null!;

    public void Dispose()
    {
        Notifier.NotifyClosed -= OnCloseMenuNotify;
    }

    protected override void OnInitialized()
    {
        Notifier.NotifyClosed += OnCloseMenuNotify;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            SnapPoints.Add(snapPoint.Id, snapPoint);
        }

        if (gate != null)
        {
            SnapPoints[gate.Id] = snapPoint;
        }
    }

    /// <summary>
    /// Notifies the CellMenusNotifier that the menu state is being changed
    /// </summary>
    /// <returns></returns>
    private void OnCloseMenuNotify()
    {
        Clicked = false;
        StateHasChanged();
    }

    private void OnClick()
    {
        Clicked = true;
        Notifier.NotifyMenuOpened();
        StateHasChanged();
    }

    private void ExitAddGateMenu(string? gateName)
    {
        if (gateName != null)
        {
            // Add a new gate with given name to this cell.
            AddGate?.Invoke(gateName, snapPoint.Id);
        }

        Notifier.NotifyMenuClosed();
    }

    private void ExitDeleteGateMenu(bool deleteGate)
    {
        if (deleteGate)
        {
            // Delete the gate
            DeleteGate?.Invoke(snapPoint.Id);
        }

        Notifier.NotifyMenuClosed();
    }

    [ExcludeFromCodeCoverage] // Reason: the coverage tool doesn't see the execution of this property
    private string ClickedCellStr => Clicked ? "clicked" : "";

}
