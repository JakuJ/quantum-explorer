@using Microsoft.AspNetCore.Hosting
@using Compiler
@using Explorer.Utilities.Composer
@using Microsoft.Extensions.Logging
@using static Utilities.Rendering
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JsRuntime
@inject IWebHostEnvironment Environment;
@inject ILogger<Grid> Logger;

<div id="grid">
    @for (var y = 0; y < gates.GetLength(1); y++)
    {
        <div class="grid-row">
            <Line X1=0 X2=@(40*gates.GetLength(0))/>
            @for (var x = 0; x < gates.GetLength(0); x++)
            {
                var (localX, localY) = (x, y);

                // Snap point on the cell
                var cellSnapPoint = new SnapPoint(AddSnapPoint, x, y);
                @RenderContent(cellSnapPoint)

                // Snap point between the cells
                var halfSnapPoint = new SnapPoint(AddSnapPoint, x, y, true);
                @RenderContent(halfSnapPoint)

                <Cell>
                    @{
                        var quantumGate = gates[localX, localY];
                        if (quantumGate != null)
                        {
                            var gate = new Gate(Environment, quantumGate.Name);
                            gridSnapAssoc.Associate(cellSnapPoint.Id, gate.Id);
                            @RenderContent(gate)
                        }
                    }
                </Cell>
            }
        </div>
    }
</div>

@code {

    [Parameter]
    [Required]
    public GateGrid GateGrid { get; set; }

    private QuantumGate[,] gates;

    private Dictionary<string, SnapPoint> snapPoints;

    private GridSnapAssoc gridSnapAssoc;

    public Grid()
    {
        snapPoints = new Dictionary<string, SnapPoint>();
        gridSnapAssoc = new GridSnapAssoc(Logger, MoveGate);
        GateGrid = new GateGrid();
        gates = null!;
    }

    protected override void OnParametersSet()
    {
        gates = GetGates();
        StateHasChanged();
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("Library.initGrids");
        await SetReferences();
    }

    private QuantumGate[,] GetGates()
    {
        gridSnapAssoc.Clear();
        snapPoints.Clear();
        var arr = new QuantumGate[GateGrid.Width, GateGrid.Height];
        foreach ((var gate, int x, int y) in GateGrid.Gates)
        {
            arr[x, y] = gate;
        }
        return arr;
    }

    private void MoveGate(string oldSnapId, string newSnapId)
    {
        var oldSnap = snapPoints[oldSnapId];
        var newSnap = snapPoints[newSnapId];
        if(oldSnap.X >= gates.GetLength(0) || oldSnap.Y >= gates.GetLength(1))
            throw new ArgumentOutOfRangeException("Old snap does not belong to the gates grid");
        if(newSnap.X >= gates.GetLength(0) || newSnap.Y >= gates.GetLength(1))
            throw new ArgumentOutOfRangeException("New snap does not belong to the gates grid");
        Logger.LogInformation("Moving the gate from {0} to {1}", oldSnap, newSnap);
        GateGrid.MoveGate(oldSnap.X, oldSnap.Y, newSnap.X, newSnap.Y);
        gates = GetGates();
        StateHasChanged();
    }

    private void AddSnapPoint(SnapPoint point)
    {
        snapPoints.Add(point.Id, point);
    }

    /// Expand the grid by adding a new column
    [JSInvokable]
    public void Expand(string snapId)
    {
        var point = snapPoints[snapId];
        Logger.LogInformation("Expanding at {0}", point);
        GateGrid.InsertColumn(point.X);
        gates = GetGates();
        StateHasChanged();
    }

    private async Task SetReferences()
    {
        var gridRef = DotNetObjectReference.Create(this);
        var assocRef = DotNetObjectReference.Create(gridSnapAssoc);

        await JsRuntime.InvokeVoidAsync(
            "Library.setReferences",
            gridRef, assocRef);
    }
}
