@inject IJSRuntime JsRuntime
@using Common
@using System.Diagnostics.CodeAnalysis
@implements IDisposable

<div class="grid-container">
    @for (var y = 0; y < gates.GetLength(1); y++)
    {
        <div class="grid-outer-row">
            <RowID Name="@(GateGrid.Names[y])"/>
            <div class="grid-row" style="width: @(50 * GateGrid.Width + 10)px;">
                <Line X1="0" X2="@(50 * GateGrid.Width + 10)"/>
                @for (var x = 0; x < gates.GetLength(0); x++)
                {
                    QuantumGate? localQGate = gates[x, y];

                    // Vertical lines for the controlled gates
                    @if (localQGate.HasValue)
                    {
                        bool isControl = localQGate.Value.IsControlGate();
                        @for (int y2 = y + 1; y2 < gates.GetLength(1); y2++)
                        {
                            QuantumGate? g2 = gates[x, y2];
                            bool isControl2 = g2?.IsControlGate() ?? isControl;
                            @if (isControl != isControl2)
                            {
                                // a gate controls another one
                                int xPix = 10 + 50 * x;
                                const int y1Pix = 20;
                                int y2Pix = 50 * (y2 - y);
                                <div class="line-container">
                                    <Line Y1="0" Y2="@y2Pix" Left="@xPix" Top="@y1Pix"/>
                                </div>
                            }
                        }
                    }

                    // Snap point between the cells
                    <SnapPoint X="@x" Y="@y" Half="@true" @ref="SnapRef"/>

                    <Cell X="@x" Y="@y" QuantumGate="@localQGate" SnapPoints="@snapPoints" AddGate="@Add" DeleteGate="@Delete"/>
                }
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public GateGrid GateGrid { get; set; } = null!;

    private Dictionary<string, SnapPoint> snapPoints = new();

    private SnapPoint SnapRef
    {
        set => snapPoints.Add(value.Id, value);
    }

    private QuantumGate?[,] gates = null!;

    private DotNetObjectReference<Grid>? reference;

    protected override void OnParametersSet()
    {
        gates = RefreshGateArray();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            reference = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("Library.setReference", reference);
        }

        await JsRuntime.InvokeVoidAsync("Library.initGrids");
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
        reference?.Dispose();
    }

    [ExcludeFromCodeCoverage] // Reason: called by JS functions
    [JSInvokable]
    public void Expand(string gateId, string snapId)
    {
        SnapPoint oldSnap = snapPoints[gateId];
        SnapPoint newSnap = snapPoints[snapId];

        GateGrid.InsertColumn(newSnap.X + 1);
        GateGrid.MoveGate(oldSnap.X + (newSnap.X < oldSnap.X ? 1 : 0), oldSnap.Y, newSnap.X + 1, newSnap.Y);

        ForceRerender();
    }

    [ExcludeFromCodeCoverage] // Reason: called by JS functions
    [JSInvokable]
    public void Move(string gateId, string snapId)
    {
        SnapPoint oldSnap = snapPoints[gateId];
        SnapPoint newSnap = snapPoints[snapId];

        GateGrid.MoveGate(oldSnap.X, oldSnap.Y, newSnap.X, newSnap.Y);

        ForceRerender();
    }

    private void Add(string gateName, string snapId)
    {
        SnapPoint snap = snapPoints[snapId];
        var gate = new QuantumGate(gateName);
        GateGrid.AddGate(snap.X, snap.Y, gate);
        ForceRerender();
    }

    private void Delete(string snapId)
    {
        SnapPoint snap = snapPoints[snapId];
        GateGrid.RemoveAt(snap.X, snap.Y, false);
        ForceRerender();
    }

    private QuantumGate?[,] RefreshGateArray()
    {
        var arr = new QuantumGate?[GateGrid.Width, GateGrid.Height];
        foreach ((QuantumGate gate, int x, int y) in GateGrid.Gates)
        {
            arr[x, y] = gate;
        }
        return arr;
    }

    private void ForceRerender()
    {
        gates = new QuantumGate?[gates.GetLength(0), gates.GetLength(1)];
        StateHasChanged();

        gates = RefreshGateArray();
        StateHasChanged();
    }

}
