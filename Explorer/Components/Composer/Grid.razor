@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Hosting
@using Compiler
@using static Utilities.Rendering
@inject IJSRuntime JsRuntime
@inject IWebHostEnvironment Environment;

@{
    // Setting parameters in Components created in code (SnapPoint, Gate)
    #pragma warning disable BL0005
}

<div id="grid">
    @for (var y = 0; y < Gates.GetLength(1); y++)
    {
        <div class="grid-row">

            @* <RowID y=@(y)/> *@

            @for (var x = 0; x < Gates.GetLength(0); x++)
            {
                (int localX, int localY) = (x, y);

                var cellSnapPoint = new SnapPoint { XOffset = $"{x * 40}px" };
                @RenderContent(cellSnapPoint)

                <SnapPoint Half=true xOffset=@($"{x * 40 + 20}px")/>

                <Cell>
                    @{
                        QuantumGate? quantumGate = Gates[localX, localY];
                        if (quantumGate != null)
                        {
                            var gate = new Gate(Environment) { Name = quantumGate.Name };
                            assocs.Add((cellSnapPoint.Id, gate.Id));
                            @RenderContent(gate)
                        }
                    }
                </Cell>
            }
        </div>
    }
</div>

@code {

    [Parameter]
    public QuantumGate[,] Gates { get; set; } = null!; // required parameter

    private List<(string, string)> assocs = new List<(string, string)>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Task[] tasks = assocs
            .Select(ab => JsRuntime.InvokeVoidAsync("Library.associateGate", ab.Item1, ab.Item2)
                                   .AsTask())
            .ToArray();

        await Task.WhenAll(tasks);
    }

}
