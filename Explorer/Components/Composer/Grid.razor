@using Compiler
@using Microsoft.Extensions.Logging
@using static Utilities.Rendering
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JsRuntime
@inject ILogger<Grid> Logger;

<div class="grid-container">
    @for (var y = 0; y < GateGrid.Height; y++)
    {
        <div class="grid-outer-row">
            <RowID Name="@(GateGrid.Names[y])"/>
            <div class="grid-row">
                <Line X1="0" X2="@(40 * GateGrid.Width)"/>
                @for (var x = 0; x < GateGrid.Width; x++)
                {
                    // Snap point between the cells
                    <SnapPoint X="@x" Y="@y" Logger="@Logger" Half="@true" @ref="SnapRef"/>

                    QuantumGate localQGate = gates[x, y];

                    <Cell X="@x" Y="@y" QuantumGate="@localQGate" SnapPoints="@snapPoints"/>              }
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public GateGrid GateGrid { get; set; } = null!;

    private Dictionary<string, SnapPoint> snapPoints = new();

    private SnapPoint SnapRef
    {
        set => snapPoints.Add(value.Id, value);
    }

    private QuantumGate[,] gates = null!;

    private QuantumGate[,] RefreshGateArray()
    {
        Logger.LogInformation("RefreshGateArray called");

        var arr = new QuantumGate[GateGrid.Width, GateGrid.Height];
        foreach ((QuantumGate gate, int x, int y) in GateGrid.Gates)
        {
            arr[x, y] = gate;
        }
        return arr;
    }

    protected override void OnInitialized()
    {
        gates = RefreshGateArray();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Initialize draggable and droppable elements
        await JsRuntime.InvokeVoidAsync("Library.initGrids");
    }

    private void MoveGate(string oldSnapId, string newSnapId)
    {
        SnapPoint oldSnap = snapPoints[oldSnapId];
        SnapPoint newSnap = snapPoints[newSnapId];

        Logger.LogInformation("Moving the gate from snap {0} to snap {1}", oldSnap, newSnap);
        GateGrid.MoveGate(oldSnap.X, oldSnap.Y, newSnap.X, newSnap.Y);
        gates = RefreshGateArray();
        StateHasChanged();
    }

    /// Expand the grid by adding a new column
    [JSInvokable]
    public void Expand(string snapId)
    {
        SnapPoint point = snapPoints[snapId];
        Logger.LogInformation("Expanding at snap {0}", point);
        GateGrid.InsertColumn(point.X);
        gates = RefreshGateArray();
        StateHasChanged();
    }

}
