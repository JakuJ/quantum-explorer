@using Common
@using System.Reflection
@using static Utilities.Rendering
@inject IJSRuntime JsRuntime;

<div id="grid">
    @for (var y = 0; y < 4; y++)
    {
        <div class="grid-row">
            @for (var x = 0; x < 10; x++)
            {
                int localX = x;
                int localY = y;

                var cellOffset = $"{x * 40}px";
                var gutterOffset = $"{x * 40 + 20}px";
                var gateName = $"{x}:{y}";

                var cellSnapPoint = new SnapPoint { xOffset = cellOffset };
                @RenderContent(cellSnapPoint)

                <SnapPoint xOffset=@gutterOffset/>

                <Cell>
                    @if (localX % 2 == 0 && localY % 2 == 0)
                    {
                        var gate = new Gate { Name = gateName };
                        assocs.Add((cellSnapPoint.Id, gate.Id));

                        @RenderContent(gate)
                    }
                </Cell>
            }
        </div>
    }
</div>

@code {

    private List<(string, string)> assocs = new List<(string, string)>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Task[] tasks = assocs
            .Select(ab => JsRuntime.InvokeVoidAsync("Library.associateGate", ab.Item1, ab.Item2)
                                   .AsTask())
            .ToArray();

        await Task.WhenAll(tasks);
    }

}
