@using static Utilities.Rendering
@using Compiler
@inject IJSRuntime JsRuntime

<div id="grid">
    @for (var y = 0; y < grid.GetLength(1); y++)
    {
        <div class="grid-row">
            @for (var x = 0; x < grid.GetLength(0); x++)
            {
                int localX = x;
                int localY = y;

                var cellOffset = $"{x * 40}px";
                var gutterOffset = $"{x * 40 + 20}px";

                var cellSnapPoint = new SnapPoint { xOffset = cellOffset };
                @RenderContent(cellSnapPoint)

                <SnapPoint xOffset=@gutterOffset/>

                <Cell>
                    @{
                        QuantumGate? qgate = grid[localX, localY];
                        if(qgate != null)
                        {
                            var gate = new Gate { Name = qgate.Name };
                            assocs.Add((cellSnapPoint.Id, gate.Id));
                            @RenderContent(gate)
                        }
                    }
                </Cell>
            }
        </div>
    }
</div>

@code {

    [Parameter]
    public QuantumGate?[,] grid { get; set; }

    private List<(string, string)> assocs = new List<(string, string)>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Task[] tasks = assocs
            .Select(ab => JsRuntime.InvokeVoidAsync("Library.associateGate", ab.Item1, ab.Item2)
                                   .AsTask())
            .ToArray();

        await Task.WhenAll(tasks);
    }

}
