@using System.Linq
@using Microsoft.Extensions.Logging
@using Compiler
@inject IJSRuntime JsRuntime
@inject ILogger<Composer> Logger

<div class="overflow-hidden" style="height: 100%">
    <div class="nav-tabs-container">
        <ul class="nav nav-tabs">
            @foreach (var key in keysNames.Select(x => x.Key))
            {
                <li class="nav-item">
                    <a class="nav-link noselect @(selectedKey == key ? "active" : "")" @onclick="@(() => OnTabChange(key))">@key</a>
                </li>
            }
        </ul>
    </div>
    <div class="vis-content">
        @if (keysNames.ContainsKey(selectedKey) && _ast.ContainsKey(keysNames[selectedKey]))
        {
            <Grid GateGrid="@(_ast[keysNames[selectedKey]])"/>
        }
    </div>
</div>

@code {
    private Dictionary<string, GateGrid> _ast = new();

    private Dictionary<string, string> keysNames = new();

    private string selectedKey = "";

    private Dictionary<string, string> KeysNames()
    {
        if(_ast.Count > 0)
        {
            int id = _ast.Keys.First().IndexOf('.');
            if(id > -1)
            {
                bool sameNamespaces = _ast.Keys.All(k => k.Substring(0, id) == _ast.Keys.First().Substring(0, id));
                if(sameNamespaces)
                {
                    return _ast.Keys.ToDictionary(k => k.Substring(id + 1, k.Length - id - 1));
                }
            }
        }
        return _ast.Keys.ToDictionary(k => k);
    }

    public async Task UpdateGridsAsync(Dictionary<string, GateGrid> ast)
    {
        // force the underlying Grid component to render from scratch
        _ast.Clear();
        keysNames.Clear();
        selectedKey = "";
        await InvokeAsync(StateHasChanged);

        _ast = ast;
        keysNames = KeysNames();
        selectedKey = keysNames.First().Key ?? "";
        await InvokeAsync(StateHasChanged);
    }

    void OnTabChange(string key)
    {
        selectedKey = key;
        Logger.LogDebug($"Tab with key {key} was selected.");
    }
}
