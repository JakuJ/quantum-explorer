@using System.Text.Json.Serialization
@inject IJSRuntime JsRuntime
@implements IDisposable

<div id="ls-status" class="alert alert-light" role="alert">
    @switch (state)
    {
        case ConnectionState.Disconnected:
        {
            <img src="/images/icons/disconnected.svg" alt="" width="16" height="16">
            @:Disconnected
            break;
        }
        case ConnectionState.Connecting:
        {
            <div class="spinner-border spinner-border-sm text-warning" role="status"></div>
            @:Connecting
            break;
        }
        case ConnectionState.Connected:
        {
            <img src="/images/icons/connected.svg" alt="" width="16" height="16">
            @:Connected
            break;
        }
        case ConnectionState.SyntaxOnly:
        {
            <img src="/images/icons/warning.svg" alt="" width="16" height="16">
            @:Syntax only
            break;
        }
    }
    <span class="tooltiptext">
        Language server support status
    </span>
</div>

@code {

    [JsonConverter(typeof(JsonStringEnumConverter))]
    public enum ConnectionState
    {
        Disconnected,
        Connecting,
        Connected,
        SyntaxOnly,
    }

    private DotNetObjectReference<LsStatus>? reference;

    private ConnectionState state = ConnectionState.Disconnected;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        // Save the reference to be used by the JS Editor class
        reference = DotNetObjectReference.Create(this);
        await JsRuntime.InvokeVoidAsync("Library.Editor.SetStatusReference", reference);
    }

    /// <summary>
    /// Sets state displayed in the component.
    /// </summary>
    /// <param name="_state"><see cref="ConnectionState"/> representing LS connection status.</param>
    [JSInvokable]
    public void SetState(ConnectionState _state)
    {
        state = _state;
        StateHasChanged();
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
        reference?.Dispose();
    }

}
