@using Microsoft.Extensions.Hosting
@using Microsoft.AspNetCore.Hosting
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment Env

<div id="editor" @ref="editorRootRef"></div>

@code {
    private ElementReference editorRootRef;

    private string editorId = "";

    [Parameter]
    public Func<string?>? GetInitialCode { get; set; }

    /// <summary>Asynchronously gets code stored in Editor component.</summary>
    /// <returns>An awaitable <see cref="Task"/> returning <see cref="string"/>.</returns>
    public async Task<string> GetCode()
    => await JSRuntime.InvokeAsync<string>("Library.Editor.GetCode", editorId).AsTask();

    /// <summary>Asynchronously sets code in Editor component.</summary>
    /// <param name="code">Code to be set</param>
    /// <returns>An awaitable <see cref="Task"/>.</returns>
    public async Task SetCode(string code)
    => await JSRuntime.InvokeVoidAsync("Library.Editor.SetCode", editorId, code).AsTask();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string? initialCode = GetInitialCode?.Invoke();
            bool isDevelopment = Env.IsDevelopment();
            string lsHost = Environment.GetEnvironmentVariable("LANGUAGE_SERVER_URL") ?? "ws://localhost:8091";
            editorId = await JSRuntime.InvokeAsync<string>("Library.Editor.InitializeEditor", editorRootRef, initialCode, lsHost, isDevelopment);
        }
    }

}
