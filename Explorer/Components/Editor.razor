@inject IJSRuntime JSRuntime

<div id="editor" @ref="editorRootRef"></div>

@code {
    private ElementReference editorRootRef;

    private string? editorId;

    /// <summary>Asynchronously gets code stored in Editor component.</summary>
    /// <returns>An awaitable <see cref="Task"/> returning <see cref="string"/>.</returns>
    public async Task<string> GetCode()
    => await JSRuntime.InvokeAsync<string>("Library.Editor.GetCode", editorId).AsTask();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            editorId = await JSRuntime.InvokeAsync<string>("Library.Editor.InitializeEditor", editorRootRef);
        }
    }

    /// <summary>Saves the reference to an instance of <see cref="LsStatus"/> to be used by the JS Editor class.</summary>
    /// <param name="target"><see cref="LsStatus"/> component instance to pass to the Editor class on the JS side.</param>
    /// <returns>An awaitable <see cref="Task"/>.</returns>
    public async Task SetStatusReference(LsStatus target)
    {
        var objRef = DotNetObjectReference.Create(target);
        await JSRuntime.InvokeVoidAsync("Library.Editor.SetStatusReference", objRef);
    }

}
